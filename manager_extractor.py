# -*- coding: utf-8 -*-
"""Manager_extractor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MQ-Rm3MM8U1n2CmLaZMvwzc6o8hadOa9
"""

#!pip install yargy

import pandas as pd
import numpy as np

from yargy.tokenizer import MorphTokenizer
from yargy import (
    Parser,
    or_, rule
)
from yargy.pipelines import morph_pipeline
from yargy.predicates import (
    eq, gram
)

data = pd.read_csv('test_data.csv') #/content/drive/MyDrive/Bewise.ai/

data.head()

print('Count speeching =', len(data['dlg_id'].unique()))

"""В тестовом датасете 6 диалогов различной длительности

## Извлечение сущностей

### Yargy
"""

# Yargy

# из дата фрейма возьмем только реплики менеджеров
# т.к реплики приветствия и прощания менеджеров стандартизированы правилами компании
# Приветствие и имя явно находятся в начале диалога, поэтому при работе функции
# можно парсить только первые 3 строчки (в коде прорабатывается весь диалог на случай "поводных камней").
# (Диалоги разной длительности)
# Аналогично с окончанием разговора. 

manager_yargy = {}

for i, group in data.groupby(by=['dlg_id', 'role']):
  if i[1] == 'manager':
    manager_yargy[i[0]] = list(group['text'])
  print(f'В диалоге {i}, количество реплик = {len(group)}')

"""### RULES"""

# Name

NAME = or_(
    rule(
        morph_pipeline(['звать']),
        gram('Name')
        ),

    rule(
        gram('Name'),
        morph_pipeline(['звать'])
        )
      )

# Company

COMPANY = or_(
    rule(
        morph_pipeline(['компания']),
        gram('NOUN'),
        gram('NOUN').optional()
    ),
    rule(
        morph_pipeline(['компания']),
        gram('NOUN'),
        eq('бизнес').optional()
    ),

    rule(
        morph_pipeline(['компания']),
        eq('диджитал').optional(),
        gram('NOUN')
        )
    )

# Приветствие - прощание

HELLO = morph_pipeline([
    'Здравствуй',
    'Здравствуйте',
    'Добрый день',
    'Доброе утро',
    'Привет',
    'Добрый вечер',
    'Добрый'
])

GOOD_BYE = morph_pipeline([
    'До свидания',
    'Приятного вечера',
    'Всего доброго',
    'Хорошего дня',
    'Хорошего вечера'
])

"""### Extractor"""

def extractor(dialog, rules):
  
  parser = Parser(rules)

  for replica in dialog:
      matches = list(parser.findall(replica))
      if matches and rules not in (NAME, COMPANY):
        return replica
      elif matches:
        for match in matches:
          toks = ' '.join([_.value for _ in match.tokens])
          return [toks, replica]

"""## Итоговый датафрейм"""

# Таблица id, приветствие, представление, Имя, Компания, Прощание

cosolidation_table = pd.DataFrame(index=manager_yargy)

for i in range(len(manager_yargy)):

  # hello
  if extractor(manager_yargy[i], HELLO):
    cosolidation_table.loc[i, 'hello'] = extractor(manager_yargy[i], HELLO)

  # extract name + replica
  if extractor(manager_yargy[i], NAME):
    cosolidation_table.loc[i, 'replica_with_name'] = extractor(manager_yargy[i], NAME)[1]
    cosolidation_table.loc[i, 'name'] = extractor(manager_yargy[i], NAME)[0]

  # extract name_company (есть возможность вывести так же реплику)
  if extractor(manager_yargy[i], COMPANY):
    cosolidation_table.loc[i, 'name_company'] = extractor(manager_yargy[i], COMPANY)[0]

  # bye
  if extractor(manager_yargy[i], GOOD_BYE):
    cosolidation_table.loc[i, 'bye'] = extractor(manager_yargy[i], GOOD_BYE)

  # greeting
  if extractor(manager_yargy[i], HELLO) and extractor(manager_yargy[i], GOOD_BYE):
    cosolidation_table.loc[i, 'greeting'] = True
  else: cosolidation_table.loc[i, 'greeting'] = False

cosolidation_table

cosolidation_table.to_csv('cosolidation_table.csv') #/content/drive/MyDrive/Bewise.ai/